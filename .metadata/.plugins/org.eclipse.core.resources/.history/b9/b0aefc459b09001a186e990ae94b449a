package com.example.spring02.controller.upload;

import java.io.InputStream;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.example.spring02.util.UploadFileUtils;

@Controller
public class AjaxUploadController {

	private static final Logger logger = LoggerFactory.getLogger(AjaxUploadController.class);
	
	// servlet-context.xml에 선언된 값
	@Resource(name="uploadPath")
	String uploadPath;
	
	@RequestMapping(value="/upload/uploadAjax", method = RequestMethod.GET)
	public void uploadAjax() {
		// views/upload/uploadAjax.jsp로 이동
	}
	
	@RequestMapping(value="/upload/uploadAjax", method = RequestMethod.POST, produces = "text/plain;charset=utf-8")
	@ResponseBody
	public ResponseEntity<String> uploadAjax(MultipartFile file) throws Exception {
		logger.info("originalName:" + file.getOriginalFilename());
		logger.info("size:" + file.getSize());
		logger.info("contentType:" + file.getContentType());
//		new ResponseEntity(데이터, 상태코드)
//		new ResponseEntity(업로드된 파일 이름, 상태코드)
		return new ResponseEntity<String>(UploadFileUtils.uploadFile(uploadPath, file.getOriginalFilename(), file.getBytes()), HttpStatus.OK);
	}
	
	@ResponseBody
	@RequestMaaping("/upload/displayFile")
	public ResponseEntity<byte[]> displayFile(String fileName) throws Exception {
		InputStream in = null; // 스트림
		ResponseEntity<byte[]> entity = null;
		try {
			// 파일의 확장자 검사
			// test.jpg a.b.c.d jpg
			String formatName = fileName.substring(fileName.lastIndexOf(".") + 1);
			MediaType mType = MediaTuiles.getMediaType(formatName);
			// 헤더를 생성
			HttpHeader headers = new HttpHeaders();
			
		}
	}
	
}
